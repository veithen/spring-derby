package net.sf.springderby.wrapper;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

public class PreparedStatementWrapper implements PreparedStatement {
	private WrapperFactory wrapperFactory;
	private StatementWrapper statementWrapper;
	private PreparedStatement parent;
	
	final void init(WrapperFactory wrapperFactory, ConnectionWrapper connectionWrapper, PreparedStatement parent) {
		this.wrapperFactory = wrapperFactory;
		statementWrapper = wrapperFactory.wrapStatement(connectionWrapper, parent);
		this.parent = parent;
	}

	public void addBatch(String sql) throws SQLException {
		statementWrapper.addBatch(sql);
	}

	public void cancel() throws SQLException {
		statementWrapper.cancel();
	}

	public void clearBatch() throws SQLException {
		statementWrapper.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		statementWrapper.clearWarnings();
	}

	public void close() throws SQLException {
		statementWrapper.close();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return statementWrapper.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return statementWrapper.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return statementWrapper.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		return statementWrapper.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		return statementWrapper.executeBatch();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		return wrapperFactory.wrapResultSet(ResultSetType.QUERY, this, statementWrapper.executeQuery(sql));
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return statementWrapper.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return statementWrapper.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return statementWrapper.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		return statementWrapper.executeUpdate(sql);
	}

	public Connection getConnection() throws SQLException {
		return statementWrapper.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return statementWrapper.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return statementWrapper.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return statementWrapper.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return statementWrapper.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return statementWrapper.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return statementWrapper.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return statementWrapper.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return statementWrapper.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return statementWrapper.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return statementWrapper.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return statementWrapper.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return statementWrapper.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return statementWrapper.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return statementWrapper.getWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		statementWrapper.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		statementWrapper.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		statementWrapper.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		statementWrapper.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		statementWrapper.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		statementWrapper.setMaxRows(max);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		statementWrapper.setQueryTimeout(seconds);
	}

	public void addBatch() throws SQLException {
		parent.addBatch();
	}

	public void clearParameters() throws SQLException {
		parent.clearParameters();
	}

	public boolean execute() throws SQLException {
		return parent.execute();
	}

	public ResultSet executeQuery() throws SQLException {
		return parent.executeQuery();
	}

	public int executeUpdate() throws SQLException {
		return parent.executeUpdate();
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		return parent.getMetaData();
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		return parent.getParameterMetaData();
	}

	public void setArray(int i, Array x) throws SQLException {
		parent.setArray(i, x);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parent.setAsciiStream(parameterIndex, x, length);
	}

	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		parent.setBigDecimal(parameterIndex, x);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parent.setBinaryStream(parameterIndex, x, length);
	}

	public void setBlob(int i, Blob x) throws SQLException {
		parent.setBlob(i, x);
	}

	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		parent.setBoolean(parameterIndex, x);
	}

	public void setByte(int parameterIndex, byte x) throws SQLException {
		parent.setByte(parameterIndex, x);
	}

	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		parent.setBytes(parameterIndex, x);
	}

	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		parent.setCharacterStream(parameterIndex, reader, length);
	}

	public void setClob(int i, Clob x) throws SQLException {
		parent.setClob(i, x);
	}

	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		parent.setDate(parameterIndex, x, cal);
	}

	public void setDate(int parameterIndex, Date x) throws SQLException {
		parent.setDate(parameterIndex, x);
	}

	public void setDouble(int parameterIndex, double x) throws SQLException {
		parent.setDouble(parameterIndex, x);
	}

	public void setFloat(int parameterIndex, float x) throws SQLException {
		parent.setFloat(parameterIndex, x);
	}

	public void setInt(int parameterIndex, int x) throws SQLException {
		parent.setInt(parameterIndex, x);
	}

	public void setLong(int parameterIndex, long x) throws SQLException {
		parent.setLong(parameterIndex, x);
	}

	public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
		parent.setNull(paramIndex, sqlType, typeName);
	}

	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		parent.setNull(parameterIndex, sqlType);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
		parent.setObject(parameterIndex, x, targetSqlType, scale);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		parent.setObject(parameterIndex, x, targetSqlType);
	}

	public void setObject(int parameterIndex, Object x) throws SQLException {
		parent.setObject(parameterIndex, x);
	}

	public void setRef(int i, Ref x) throws SQLException {
		parent.setRef(i, x);
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		parent.setShort(parameterIndex, x);
	}

	public void setString(int parameterIndex, String x) throws SQLException {
		parent.setString(parameterIndex, x);
	}

	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		parent.setTime(parameterIndex, x, cal);
	}

	public void setTime(int parameterIndex, Time x) throws SQLException {
		parent.setTime(parameterIndex, x);
	}

	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		parent.setTimestamp(parameterIndex, x, cal);
	}

	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		parent.setTimestamp(parameterIndex, x);
	}

	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parent.setUnicodeStream(parameterIndex, x, length);
	}

	public void setURL(int parameterIndex, URL x) throws SQLException {
		parent.setURL(parameterIndex, x);
	}
}
