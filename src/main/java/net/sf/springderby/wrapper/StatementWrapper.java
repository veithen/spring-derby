package net.sf.springderby.wrapper;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class StatementWrapper implements Statement {
	private final WrapperFactory wrapperFactory;
	private final Statement parent;

	public StatementWrapper(WrapperFactory wrapperFactory, Statement parent) {
		this.wrapperFactory = wrapperFactory;
		this.parent = parent;
	}

	public void addBatch(String sql) throws SQLException {
		parent.addBatch(sql);
	}

	public void cancel() throws SQLException {
		parent.cancel();
	}

	public void clearBatch() throws SQLException {
		parent.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		parent.clearWarnings();
	}

	public void close() throws SQLException {
		parent.close();
	}

	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return parent.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return parent.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return parent.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		return parent.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		return parent.executeBatch();
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		return wrapperFactory.wrapResultSet(ResultSetType.QUERY, parent.executeQuery(sql));
	}

	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return parent.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return parent.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return parent.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		return parent.executeUpdate(sql);
	}

	public Connection getConnection() throws SQLException {
		return parent.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return parent.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return parent.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return parent.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return parent.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return parent.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return parent.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return parent.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return parent.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return parent.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return parent.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return parent.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return parent.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return parent.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return parent.getWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		parent.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		parent.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		parent.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		parent.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		parent.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		parent.setMaxRows(max);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		parent.setQueryTimeout(seconds);
	}
}
