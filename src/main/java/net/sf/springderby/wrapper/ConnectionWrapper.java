package net.sf.springderby.wrapper;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

public class ConnectionWrapper implements Connection {
	private final WrapperFactory wrapperFactory;
	private final Connection parent;

	public ConnectionWrapper(WrapperFactory wrapperFactory, Connection parent) {
		this.wrapperFactory = wrapperFactory;
		this.parent = parent;
	}

	public void clearWarnings() throws SQLException {
		parent.clearWarnings();
	}

	public void close() throws SQLException {
		parent.close();
	}

	public void commit() throws SQLException {
		parent.commit();
	}

	public Statement createStatement() throws SQLException {
		return wrapperFactory.wrapStatement(parent.createStatement());
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return wrapperFactory.wrapStatement(parent.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		return wrapperFactory.wrapStatement(parent.createStatement(resultSetType, resultSetConcurrency));
	}

	public boolean getAutoCommit() throws SQLException {
		return parent.getAutoCommit();
	}

	public String getCatalog() throws SQLException {
		return parent.getCatalog();
	}

	public int getHoldability() throws SQLException {
		return parent.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return parent.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return parent.getTransactionIsolation();
	}

	public Map<String,Class<?>> getTypeMap() throws SQLException {
		return parent.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return parent.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return parent.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return parent.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException {
		return parent.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return parent.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return parent.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return parent.prepareCall(sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return wrapperFactory.wrapPreparedStatement(parent.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		return wrapperFactory.wrapPreparedStatement(parent.prepareStatement(sql, resultSetType, resultSetConcurrency));
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		return wrapperFactory.wrapPreparedStatement(parent.prepareStatement(sql, autoGeneratedKeys));
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return wrapperFactory.wrapPreparedStatement(parent.prepareStatement(sql, columnIndexes));
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return wrapperFactory.wrapPreparedStatement(parent.prepareStatement(sql, columnNames));
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return wrapperFactory.wrapPreparedStatement(parent.prepareStatement(sql));
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		parent.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException {
		parent.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		parent.rollback(savepoint);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		parent.setAutoCommit(autoCommit);
	}

	public void setCatalog(String catalog) throws SQLException {
		parent.setCatalog(catalog);
	}

	public void setHoldability(int holdability) throws SQLException {
		parent.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		parent.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException {
		return parent.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return parent.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException {
		parent.setTransactionIsolation(level);
	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		parent.setTypeMap(map);
	}
}
